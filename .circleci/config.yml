version: 2.1

jobs:
  runner-test:
    machine: true
    resource_class: shashika/demo1
    steps:
      - run:
          name: Greeting
          command: echo "Hi I'm on Runners ! "

      # Step 1: Check out the repository code.
      - checkout

      # Step 2: Install apictl
      - run:
          name: Install apictl
          command: |
            echo "Downloading apictl binary..."
            curl -L -o apictl.tar.gz \
              "https://github.com/wso2/product-apim-tooling/releases/download/v4.5.0/apictl-4.5.0-darwin-amd64.tar.gz"
            mkdir -p /tmp/apictl
            tar -xzvf apictl.tar.gz -C /tmp/apictl
            if [ -f "/tmp/apictl/apictl/apictl" ]; then
              mv /tmp/apictl/apictl/apictl ~/apictl
            elif [ -f "/tmp/apictl/apictl" ]; then
              mv /tmp/apictl/apictl ~/apictl
            else
              echo "apictl binary not found!" && exit 1
            fi
            chmod +x ~/apictl
            echo 'export PATH=~/apictl:$PATH' >> ~/.bashrc
            export PATH=~/apictl:$PATH
            echo "Installed apictl version:" && ~/apictl version
            export APICTL_TIMEOUT=120

      # Step 3: Configure the APIM environment
      - run:
          name: Configure APIM Environment
          command: |
            ~/apictl remove env dev || true
            export APICLIENT_TIMEOUT=120
            ~/apictl add env dev --apim https://localhost:9443

      # Step 4: Login to APIM
      - run:
          name: Login to APIM
          command: |
            echo "Logging in to APIM..."
            ~/apictl version
            echo "admin" | ~/apictl login dev --insecure -u admin --password-stdin -k

      # Step 5: Import the API project (dry-run with explicit failure)
      - run:
          name: Import API Project (dry-run)
          command: |
            # Temporarily disable exit-on-error to capture the dry-run output
            set +e
            output=$(~/apictl import api \
              --file ./SampleAPI \
              --environment dev \
              -k --rotate-revision \
              --dry-run)
            rc=$?
            # Re-enable exit-on-error
            set -e

            echo "$output"
            if echo "$output" | grep -iq ERROR; then
              echo "Dry-run validation failed â€” found ERROR"
              exit 1
            fi

      # Step 6: Import the API project (actual deploy)
      - run:
          name: Import API Project
          command: |
            ~/apictl import api --file ./SampleAPI --environment dev -k --rotate-revision

workflows:
  version: 2
  testing:
    jobs:
      - runner-test
